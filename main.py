import datetime
import logging
import os
import re
from datetime import date

import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)
from aiogram.utils import executor
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials

from telegram_bot_calendar import DetailedTelegramCalendar

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ–º—É –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞—è–≤–∫–∏
GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')  # ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
STICKER_FILE_ID1 = os.getenv('STICKER_FILE_ID1')
STICKER_FILE_ID2 = os.getenv('STICKER_FILE_ID2')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    'https://www.googleapis.com/auth/spreadsheets',
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

LEVELS = ["–ù—É–ª–µ–≤–æ–π, –Ω–µ —É—á–∏–ª(–∞) –∫–∏—Ç–∞–π—Å–∫–∏–π", "–ó–Ω–∞—é –±–∞–∑—É —Ñ–æ–Ω–µ—Ç–∏–∫–∏ –∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∏–∫–∏", "HSK 1", "HSK 2", "HSK 3+"]
FORMATS = ["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π", "–ì—Ä—É–ø–ø–æ–≤–æ–π (—Å–æ –∑–Ω–∞–∫–æ–º—ã–º–∏)", "–ì—Ä—É–ø–ø–æ–≤–æ–π (—Å –¥—Ä—É–≥–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏)"]
PURPOSES = ["–î–ª—è —Ä–∞–±–æ—Ç—ã/ –±–∏–∑–Ω–µ—Å–∞", "–•–æ—á—É —É—á–∏—Ç—å—Å—è –≤ –ö–∏—Ç–∞–µ", "–î–ª—è –ø–æ–µ–∑–¥–∫–∏ –≤ –ö–∏—Ç–∞–π", "–î–ª—è –∂–∏–∑–Ω–∏ –≤ –ö–∏—Ç–∞–µ", "–°–¥–∞—Ç—å HSK",
            "–£—á—É –¥–ª—è —Å–µ–±—è (—Ö–æ–±–±–∏)"]
USERNAME = ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π', "–£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π"]
CHECK = ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å!', '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ']
CONTACT_TYPE = ['–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º', '–ü–æ–∑–≤–æ–Ω–∏—Ç—å']
CHANGE_INFO = ['–ù–∏–∫–Ω–µ–π–º', '–¢–µ–ª–µ—Ñ–æ–Ω', '–£—Ä–æ–≤–µ–Ω—å', '–§–æ—Ä–º–∞—Ç']

CHANGE_DICT = {
    '–ù–∏–∫–Ω–µ–π–º': 'username',
    '–¢–µ–ª–µ—Ñ–æ–Ω': 'phone',
    '–£—Ä–æ–≤–µ–Ω—å': 'level',
    '–§–æ—Ä–º–∞—Ç': 'format'
}
phone_regex = re.compile(r'(\+?\d{1,3}[- ]?)?\d{10}')
user_data = {}


def create_keyboard(options):
    keyboard = InlineKeyboardMarkup()
    for option in options:
        keyboard.add(InlineKeyboardButton(text=option, callback_data=option))
    return keyboard


@dp.message_handler(commands=['start'])
async def start_consultation(message: types.Message):
    with open('images/test1.jpeg', 'rb') as photo:
        caption = (
            "‰Ω†Â•Ω!\n\n"
            "–≠—Ç–æ –±–æ—Ç –°–∏—Ä–æ–ø–∞ ‚Äî –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ, "
            "–≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤."
        )
        message_text = (
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –º—ã –ø—Ä–∏–≥–ª–∞—Å–∏–º —Ç–µ–±—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. "
            "–ù–∞ –Ω–µ–π –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —à–∫–æ–ª–µ, –ø–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π "
            "–¥–ª—è —Ç–µ–±—è —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã üôåüèª\n\n"
            "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ üëáüèª"
        )
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton("–ü–æ–µ—Ö–∞–ª–∏!"))

        await message.answer_photo(photo, caption=caption, reply_markup=keyboard)
        await message.answer(message_text, reply_markup=keyboard)


@dp.message_handler(lambda message: message.text in ["–ü–æ–µ—Ö–∞–ª–∏!", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"])
async def start_survey(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"state": "name"}
    await ask_question(message, user_data[user_id]["state"])


async def send_message(message, text, keyboard_name):
    try:
        await bot.edit_message_text(
            text,
            message.chat.id,
            message.message_id,
            reply_markup=create_keyboard(keyboard_name)
        )
    except Exception as e:
        await message.answer(
            text,
            reply_markup=create_keyboard(keyboard_name)
        )


async def ask_question(message, state):
    if state == "name":
        await bot.send_sticker(chat_id=message.chat.id, sticker=STICKER_FILE_ID2)
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    elif state == "level":
        text = "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞?"
        await send_message(message, text=text, keyboard_name=LEVELS)
    elif state == "format":
        text = "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        await send_message(message, text=text, keyboard_name=FORMATS)
    elif state == 'contact':
        text = "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n–ö–∞–∫ —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ?"
        await send_message(message, text=text, keyboard_name=CONTACT_TYPE)
    elif state == "username":
        username = message.chat.username
        await bot.edit_message_text(
            f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å —Ç–æ–±–æ–π –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è.\n"
            f"–ú—ã –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –≤ Telegram –ø–æ –Ω–∏–∫—É @{username} –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º",
            message.chat.id,
            message.message_id,
            reply_markup=create_keyboard(USERNAME)
        )
    elif state == "username_write":
        await bot.edit_message_text(
            f"–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º",
            message.chat.id,
            message.message_id
        )
    elif state == "purpose":
        await bot.edit_message_text(
            "–î–ª—è —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–π? üßê",
            message.chat.id,
            message.message_id,
            reply_markup=create_keyboard(PURPOSES)
        )
    elif state == "phone":
        user_id = message.chat.id
        if state in user_data[user_id]:
            await bot.edit_message_text(
                "–£–∫–∞–∂–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7—Ö—Ö—Ö—Ö—Ö—Ö—Ö)",
                message.chat.id,
                message.message_id
            )
        else:
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
            try:
                await bot.edit_message_text(
                    "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ª–¥–µ–ª–∞ —Å–¥–µ–ª–∞–Ω–æ!",
                    message.chat.id,
                    message.message_id
                )
            except:
                await message.answer(
                    "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ª–¥–µ–ª–∞ —Å–¥–µ–ª–∞–Ω–æ!"
                )
            await message.answer(
                "–£–∫–∞–∂–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7—Ö—Ö—Ö—Ö—Ö—Ö—Ö) –∏–ª–∏ "
                "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá",
                reply_markup=keyboard
            )
    elif state == 'meet_date':
        calendar, step = DetailedTelegramCalendar(min_date=date.today()).build()
        try:
            await bot.edit_message_text(
                '–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üóì',
                message.chat.id,
                message.message_id)
        except:
            await message.answer(
                '–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üóì',
                reply_markup=ReplyKeyboardRemove()
            )
        await message.answer(
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º",
            reply_markup=calendar
        )


@dp.message_handler(lambda message: message.text and user_data.get(message.from_user.id, {}).get("state") == "name")
async def handle_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["name"] = message.text
    user_data[user_id]["state"] = "level"
    await ask_question(message, "level")


@dp.message_handler(
    lambda message: message.text and user_data.get(message.from_user.id, {}).get("state") == "username_write")
async def handle_nickname(message: types.Message):
    user_id = message.from_user.id
    if 'username' in user_data[user_id]:
        user_data[user_id]["username"] = message.text
        results = get_results(user_id, addit_text='–¢–≤–æ—è –∑–∞—è–≤–∫–∞:')
        await send_message(message, text=results, keyboard_name=CHECK)
    else:
        user_data[user_id]["username"] = message.text
        user_data[user_id]["state"] = "meet_date"
        await ask_question(message, "meet_date")


@dp.callback_query_handler(lambda c: c.data in CHECK)
async def handle_check(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    if data == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        await bot.edit_message_text(
            "–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?",
            callback_query.message.chat.id,
            callback_query.message.message_id,
            reply_markup=create_keyboard(CHANGE_INFO)
        )
    elif data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å!':
        results = get_results(user_id, '–¢–≤–æ—è –∑–∞—è–≤–∫–∞:')
        result_admin = get_results(user_id, '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
        save_results(user_id)
        del user_data[user_id]
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"))
        await bot.edit_message_text('–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!',
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id)
        await callback_query.message.answer(
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ üîÜ",
            reply_markup=keyboard)
        await bot.send_sticker(chat_id=callback_query.message.chat.id, sticker=STICKER_FILE_ID1)
        await bot.send_message(ADMIN_ID, result_admin)


@dp.callback_query_handler(lambda c: c.data in CHANGE_INFO)
async def change_info(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    state = CHANGE_DICT[data]
    user_data[user_id]["state"] = state
    await ask_question(callback_query.message, state)


@dp.callback_query_handler(lambda c: c.data in LEVELS + FORMATS + PURPOSES + USERNAME + CONTACT_TYPE)
async def handle_inline_response(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    state = user_data[user_id]["state"]

    if state in user_data[user_id] and data != '–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π':
        if data == '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π':
            username = callback_query.message.chat.username
            user_data[user_id][state] = username
        else:
            user_data[user_id][state] = data
        results = get_results(user_id, addit_text='–¢–≤–æ—è –∑–∞—è–≤–∫–∞:')
        await bot.edit_message_text(results,
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id,
                                    reply_markup=create_keyboard(CHECK))
    elif state == "level":
        user_data[user_id]["level"] = data
        user_data[user_id]["state"] = "format"
        await ask_question(callback_query.message, "format")
    elif state == "format":
        user_data[user_id]["format"] = data
        user_data[user_id]["state"] = "purpose"
        await ask_question(callback_query.message, "purpose")
    elif state == "purpose":
        user_data[user_id]["purpose"] = data
        user_data[user_id]["state"] = "username"
        await ask_question(callback_query.message, "contact")
    elif data == '–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º':
        user_data[user_id]["state"] = "username"
        await ask_question(callback_query.message, "username")
    elif data == '–ü–æ–∑–≤–æ–Ω–∏—Ç—å':
        user_data[user_id]["state"] = "phone"
        await ask_question(callback_query.message, "phone")
    elif data == '–£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π':
        user_data[user_id]["state"] = "username_write"
        await ask_question(callback_query.message, "username_write")
    elif data == '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π':
        username = callback_query.message.chat.username
        user_data[user_id]["username"] = username
        user_data[user_id]["state"] = "meet_date"
        await ask_question(callback_query.message, "meet_date")


@dp.message_handler(content_types=types.ContentType.CONTACT)
@dp.message_handler(lambda message: phone_regex.search(message.text))
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    state = 'phone'

    if message.contact:
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text

    if state in user_data[user_id]:
        user_data[user_id][state] = phone_number
        results = get_results(user_id, addit_text='–¢–≤–æ—è –∑–∞—è–≤–∫–∞')
        await message.answer(results, reply_markup=create_keyboard(CHECK))
    else:
        user_data[user_id]["phone"] = phone_number
        await ask_question(message, "meet_date")


@dp.callback_query_handler(DetailedTelegramCalendar.func())
async def inline_kb_answer_callback_handler(query):
    result, key, step = DetailedTelegramCalendar(min_date=date.today()).process(query.data)

    if not result and key:
        await bot.edit_message_text(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º",
                                    query.message.chat.id,
                                    query.message.message_id,
                                    reply_markup=key)
    elif result:
        user_id = query.from_user.id
        user_data[user_id]["meet_date"] = str(result)
        results = get_results(user_id, addit_text='–¢–≤–æ—è –∑–∞—è–≤–∫–∞')
        await bot.edit_message_text(results,
                                    query.message.chat.id,
                                    query.message.message_id,
                                    reply_markup=create_keyboard(CHECK))


def save_results(user_id):
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    user = user_data[user_id]
    user['username'] = user.get('username', '-') or '-'
    user['phone'] = user.get('phone', '-') or '-'
    row = [
        user["name"],
        user["level"],
        user["format"],
        user["purpose"],
        user['username'],
        user["phone"],
        user["meet_date"],
        now
    ]
    sheet.append_row(row)


def get_results(user_id, addit_text):
    user = user_data[user_id]
    user['username'] = user.get('username', '-') or '-'
    user['phone'] = user.get('phone', '-') or '-'
    message = (f"{addit_text}:\n"
               f"–ò–º—è: {user['name']}\n"
               f"–£—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞: {user['level']}\n"
               f"–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π: {user['format']}\n"
               f"–¶–µ–ª—å: {user['purpose']}\n"
               f"–ù–∏–∫ –≤ —Ç–≥: {user['username']}\n"
               f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
               f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {user['meet_date']}\n\n")
    return message


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
